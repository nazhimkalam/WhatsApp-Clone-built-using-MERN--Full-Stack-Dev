{"version":3,"sources":["components/Sidebar/SideBarChat/SideBarChat.js","components/Sidebar/Sidebar.js","axios.js","components/Chat/Chat.js","App.js","serviceWorker.js","index.js"],"names":["SideBarChat","className","Avatar","Sidebar","IconButton","type","placeholder","addNewChat","instance","axios","create","baseURL","Chat","messages","useState","input","setInput","sendMessage","e","a","preventDefault","post","message","name","timestamp","received","map","style","color","Math","floor","random","value","onChange","target","onClick","App","setMessages","useEffect","get","then","response","data","channel","Pusher","cluster","subscribe","bind","newMessage","unbind_all","unsubscribe","console","log","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.76102316.chunk.js","sourcesContent":["import React from 'react'\r\nimport { Avatar } from '@material-ui/core'\r\nimport './SideBarChat.css'\r\n\r\nfunction SideBarChat() {\r\n    return (\r\n        <div className=\"sideBarChat\">\r\n             <Avatar />\r\n             <div className=\"sideBarChat__info\">\r\n                 <h2>Room name</h2>\r\n                 <p>This is the last message</p>\r\n             </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SideBarChat\r\n","import React from 'react';\r\nimport './Sidebar.css';\r\nimport { IconButton, Avatar } from '@material-ui/core';\r\nimport DonutLargeIcon from '@material-ui/icons/DonutLarge';\r\nimport ChatIcon from '@material-ui/icons/Chat';\r\nimport MoreVertIcon from '@material-ui/icons/MoreVert';\r\nimport SearchOutlinedIcon from '@material-ui/icons/SearchOutlined';\r\nimport SideBarChat from './SideBarChat/SideBarChat';\r\n\r\nfunction Sidebar() {\r\n\treturn (\r\n\t\t<div className=\"sideBar\">\r\n\t\t\t<div className=\"sideBar__header\">\r\n\t\t\t\t<Avatar />\r\n\t\t\t\t<div className=\"sideBar__headerRight\">\r\n\t\t\t\t\t<IconButton>\r\n\t\t\t\t\t\t<DonutLargeIcon />\r\n\t\t\t\t\t</IconButton>\r\n\t\t\t\t\t<IconButton>\r\n\t\t\t\t\t\t<ChatIcon />\r\n\t\t\t\t\t</IconButton>\r\n\t\t\t\t\t<IconButton>\r\n\t\t\t\t\t\t<MoreVertIcon />\r\n\t\t\t\t\t</IconButton>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\r\n\t\t\t<div className=\"sideBar__search\">\r\n\t\t\t\t<div className=\"sideBar__searchContainer\">\r\n\t\t\t\t\t<SearchOutlinedIcon />\r\n\t\t\t\t\t<input type=\"text\" placeholder=\"Search or start new group\" />\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\r\n\t\t\t<div className=\"sideBar__chats\">\r\n\t\t\t\t<SideBarChat addNewChat />\r\n\t\t\t\t<SideBarChat />\r\n\t\t\t\t<SideBarChat />\r\n\t\t\t\t<SideBarChat />\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default Sidebar;\r\n","import axios from 'axios';\r\n\r\nconst instance = axios.create({\r\n\tbaseURL: 'https://whatsapp-mern-stack.herokuapp.com/',\r\n});\r\n\r\nexport default instance;\r\n","import React, { useState } from 'react';\r\nimport './Chat.css';\r\nimport { Avatar, IconButton } from '@material-ui/core';\r\nimport SearchOutlinedIcon from '@material-ui/icons/SearchOutlined';\r\nimport AttachFileOutlinedIcon from '@material-ui/icons/AttachFileOutlined';\r\nimport MoreVertOutlinedIcon from '@material-ui/icons/MoreVertOutlined';\r\nimport MicIcon from '@material-ui/icons/Mic';\r\nimport InsertEmoticonIcon from '@material-ui/icons/InsertEmoticon';\r\nimport axios from '../../axios';\r\n\r\nfunction Chat({ messages }) {\r\n\tconst [input, setInput] = useState('');\r\n\r\n\tconst sendMessage = async(e) => {\r\n\t\te.preventDefault();\r\n\r\n\t\tawait axios.post('/messages/new', {\r\n\t\t\tmessage: input,\r\n\t\t\tname: 'demo app',\r\n\t\t\ttimestamp: 'new timestamp',\r\n\t\t\treceived: true,\r\n\t\t});\r\n\r\n\t\tsetInput('');\r\n\t};\r\n\r\n\treturn (\r\n\t\t<div className=\"chat\">\r\n\t\t\t<div className=\"chat__header\">\r\n\t\t\t\t<Avatar />\r\n\t\t\t\t<div className=\"chat__headerInfo\">\r\n\t\t\t\t\t<h3>Room Name</h3>\r\n\t\t\t\t\t<p>last seen . . . </p>\r\n\t\t\t\t</div>\r\n\r\n\t\t\t\t<div className=\"chat__headerRight\">\r\n\t\t\t\t\t<IconButton>\r\n\t\t\t\t\t\t<SearchOutlinedIcon />\r\n\t\t\t\t\t</IconButton>\r\n\r\n\t\t\t\t\t<IconButton>\r\n\t\t\t\t\t\t<AttachFileOutlinedIcon />\r\n\t\t\t\t\t</IconButton>\r\n\r\n\t\t\t\t\t<IconButton>\r\n\t\t\t\t\t\t<MoreVertOutlinedIcon />\r\n\t\t\t\t\t</IconButton>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\r\n\t\t\t<div className=\"chat__body\">\r\n\t\t\t\t{messages.map((message) => (\r\n\t\t\t\t\t<p className={`chat__message ${message.received && 'chat__reciever'}`}>\r\n\t\t\t\t\t\t<span\r\n\t\t\t\t\t\t\tclassName=\"chat__name\"\r\n\t\t\t\t\t\t\tstyle={{ color: `hsl(${Math.floor(Math.random() * 361)}, 85%, 45%)` }}\r\n\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t{message.name}\r\n\t\t\t\t\t\t</span>\r\n\t\t\t\t\t\t{message.message}\r\n\t\t\t\t\t\t<span className=\"chat__timestamp\">{message.timestamp}</span>\r\n\t\t\t\t\t</p>\r\n\t\t\t\t))}\r\n\t\t\t</div>\r\n\r\n\t\t\t<div className=\"chat__footer\">\r\n\t\t\t\t<IconButton>\r\n\t\t\t\t\t<InsertEmoticonIcon />\r\n\t\t\t\t</IconButton>\r\n\t\t\t\t<form>\r\n\t\t\t\t\t<input\r\n\t\t\t\t\t\tplaceholder=\"Type a message\"\r\n\t\t\t\t\t\ttype=\"text\"\r\n\t\t\t\t\t\tvalue={input}\r\n\t\t\t\t\t\tonChange={(e) => setInput(e.target.value)}\r\n\t\t\t\t\t/>\r\n\t\t\t\t\t<button type=\"submit\" onClick={sendMessage}>\r\n\t\t\t\t\t\tsend\r\n\t\t\t\t\t</button>\r\n\t\t\t\t</form>\r\n\t\t\t\t<IconButton>\r\n\t\t\t\t\t<MicIcon />\r\n\t\t\t\t</IconButton>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default Chat;\r\n","import React, { useEffect, useState } from 'react';\r\nimport './App.css';\r\nimport Sidebar from './components/Sidebar/Sidebar';\r\nimport Chat from './components/Chat/Chat';\r\nimport Pusher from 'pusher-js';\r\nimport axios from './axios';\r\n\r\nfunction App() {\r\n\tconst [messages, setMessages] = useState([]);\r\n\r\n\tuseEffect(() => {\r\n\t\taxios.get('/messages/sync').then((response) => {\r\n\t\t\tsetMessages(response.data);\r\n\t\t});\r\n\t}, []);\r\n\r\n\tuseEffect(() => {\r\n\t\t// using the backend pusher we are getting the data from mongodb in realtime\r\n\t\t// This useEffect runs when there is any changes the pusher informs\r\n\t\tconst pusher = new Pusher('4c3e84c47532a02a357d', {\r\n\t\t\tcluster: 'eu',\r\n\t\t});\r\n\r\n\t\tconst channel = pusher.subscribe('messages');\r\n\t\tchannel.bind('inserted', (newMessage) => {\r\n\t\t\t// alert(JSON.stringify(newMessage));\r\n\t\t\tsetMessages([...messages, newMessage]);\r\n\t\t});\r\n\r\n\t\t// clean Up process\r\n\t\treturn () => {\r\n\t\t\tchannel.unbind_all();\r\n\t\t\tchannel.unsubscribe();\r\n\t\t};\r\n\t\t\r\n\t}, [messages]);\r\n\r\n\tconsole.log(messages);\r\n\r\n\treturn (\r\n\t\t<div className=\"app\">\r\n\t\t\t<div className=\"app__body\">\r\n\t\t\t\t<Sidebar />\r\n\t\t\t\t<Chat messages={messages}/>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}